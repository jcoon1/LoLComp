}
if(SONAData$SpeakerLate[i]==1){
YyesLate[tickeryesLate] <- SONAData$LateResponse[i]
XyesLate_overfull[tickeryesLate,(SONAData$CompType[i]+6)] <- 1
tickeryesLate = tickeryesLate+1
}
}
# MVN Precision Matrix (for overfull JAGS betas) ----------------------------------------
bPrec <- matrix(0,nrow = nBeta, ncol = nBeta)
for(i in 1:nBeta){
bPrec[i,i] <- 16
}
# Run overfull linear regression in JAGS -------------------------------------------
nSamples = 4000
overfullBetayesEarlysamples <- array(rep(NaN,nSamples*nBeta),c(nSamples,nBeta))
overfullDIC <- rep(NaN,2)
X <- XyesEarly_overfull
Y<- YyesEarly
data <- list("nParticipants","nTrials","X", "Y","bPrec","nBeta") # to be passed on to JAGS
# parameters to be monitored:
parameters <- c("BETA","tau","sigma","alpha","Ypred")
#Fixed initializations (Have to have a list in a list for jags, for more than one chain, add another sub list)
myinits <- list(list("BETA" = runif(7,-.5,.5)))
# The following command calls JAGS with specific options.
#This is for running 1 chain (use code below for faster multiple chains)
samples <- jags(data, #inits=myinits,
parameters.to.save=parameters,
model.file="LoLComp_LinearReg_jags.txt", n.chains=3,n.burnin = 1000, n.iter=3000, DIC=T)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
overfullBetayesEarlysamples <- samples$BUGSoutput$sims.list$BETA
overfullsummaryyesEarly <- samples$BUGSoutput$summary
overfullDIC[1] <- samples$BUGSoutput$DIC
##Yes Late Regression##
overfullBetayesLatesamples <- array(rep(NaN,nSamples*nBeta),c(nSamples,nBeta))
X <- XyesLate_overfull
Y<- YyesLate
data <- list("nParticipants","nTrials","X", "Y","bPrec","nBeta") # to be passed on to JAGS
# parameters to be monitored:
parameters <- c("BETA","tau","sigma","alpha","Ypred")
#Fixed initializations (Have to have a list in a list for jags, for more than one chain, add another sub list)
myinits <- list(list("BETA" = runif(7,-.5,.5)))
# The following command calls JAGS with specific options.
#This is for running 1 chain (use code below for faster multiple chains)
samples <- jags(data, #inits=myinits,
parameters.to.save=parameters,
model.file="LoLComp_LinearReg_jags.txt", n.chains=3,n.burnin = 1000, n.iter=3000, DIC=T)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
overfullBetayesLatesamples <- samples$BUGSoutput$sims.list$BETA
overfullsummaryyesLate <- samples$BUGSoutput$summary
overfullDIC[2] <- samples$BUGSoutput$DIC
# Compare DIC's (between main and overfull) -----------------------------------------------------------
par(mfrow=c(1,1))
plot(1:2,rawDIC,ylim = c(-700,-300),xlab = 'Condition',ylab = 'DIC', main = "Main Model and Overfull DIC Comparison")
points(1:2,overfullDIC,col = '#DC143C',pch=3)
legend(3, -200, legend=c("Main Model", "Overfull"),
col=c("black", "red"), pch=c(1,3), cex=0.8)
text_rawDIC <- matrix(NaN,nrow = 2, ncol =2)
text_rawDIC[,1] <- 1:2
text_rawDIC[,2] <- round(rawDIC,0)
text_rawDIC <- data.frame(text_rawDIC)
names(text_rawDIC) <- c("Condition","DIC")
text(DIC~Condition, labels=DIC,data=text_rawDIC, cex=0.9, font=1,pos=1)
text_overfullDIC <- matrix(NaN,nrow = 2, ncol =2)
text_overfullDIC[,1] <- 1:2
text_overfullDIC[,2] <- round(overfullDIC,0)
text_overfullDIC <- data.frame(text_overfullDIC)
names(text_overfullDIC) <- c("Condition","DIC")
text(DIC~Condition, labels=DIC,data=text_overfullDIC, cex=0.9, font=1,pos=3,col='#DC143C')
# Expected order test for experts in "Yes" condition, overfull model ----------------------
OrderTestEarly_expertoverfull <- matrix(NaN,nrow=nrow(overfullBetayesEarlysamples),ncol = 7)
OrderTestEarly_expertoverfull[,1:6] <- overfullBetayesEarlysamples[,1:6]
##Early hypothesis: 1 > 2 > 3, 6 > 5 > 4
for(i in 1:nrow(overfullBetayesEarlysamples)){
firstcheck <- OrderTestEarly_expertoverfull[i,1] > OrderTestEarly_expertoverfull[i,2] &&
OrderTestEarly_expertoverfull[i,2] > OrderTestEarly_expertoverfull[i,3]
secondcheck <- OrderTestEarly_expertoverfull[i,6] > OrderTestEarly_expertoverfull[i,5] &&
OrderTestEarly_expertoverfull[i,5] > OrderTestEarly_expertoverfull[i,4]
OrderTestEarly_expertoverfull[i,7] <- firstcheck && secondcheck
}
OrderTestLate_expertoverfull <- matrix(NaN,nrow=nrow(overfullBetayesLatesamples),ncol = 7)
OrderTestLate_expertoverfull[,1:6] <- overfullBetayesLatesamples[,1:6]
##Late hypothesis: 3 > 2 > 1, 4 > 5 > 6
for(i in 1:nrow(overfullBetayesLatesamples)){
firstcheck <- OrderTestLate_expertoverfull[i,3] > OrderTestLate_expertoverfull[i,2] &&
OrderTestLate_expertoverfull[i,2] > OrderTestLate_expertoverfull[i,1]
secondcheck <- OrderTestLate_expertoverfull[i,4] > OrderTestLate_expertoverfull[i,5] &&
OrderTestLate_expertoverfull[i,5] > OrderTestLate_expertoverfull[i,6]
OrderTestLate_expertoverfull[i,7] <- firstcheck && secondcheck
}
EarlyOrderProb_expertoverfull <- mean(OrderTestEarly_expertoverfull[,7])
LateOrderProb_expertoverfull <- mean(OrderTestLate_expertoverfull[,7])
EarlyOrderOdds_expertoverfull <- EarlyOrderProb_expertoverfull/(1-EarlyOrderProb_expertoverfull)
LateOrderOdds_expertoverfull <- LateOrderProb_expertoverfull/(1-LateOrderProb_expertoverfull)
PriorOdds_expertoverfull <- (1/36)/(1-(1/36))
BFEarlyOrder_expertoverfull <- EarlyOrderOdds_expertoverfull/PriorOdds_expertoverfull
BFLateOrder_expertoverfull <- LateOrderOdds_expertoverfull/PriorOdds_expertoverfull
# Expected order test for novices in "Yes" condition, overfull model ----------------------
OrderTestEarly_noviceoverfull <- matrix(NaN,nrow=nrow(overfullBetayesEarlysamples),ncol = 7)
OrderTestEarly_noviceoverfull[,1:6] <- overfullBetayesEarlysamples[,7:12]
##Early hypothesis: 1 > 2 > 3, 6 > 5 > 4
for(i in 1:nrow(overfullBetayesEarlysamples)){
firstcheck <- OrderTestEarly_noviceoverfull[i,1] > OrderTestEarly_noviceoverfull[i,2] &&
OrderTestEarly_noviceoverfull[i,2] > OrderTestEarly_noviceoverfull[i,3]
secondcheck <- OrderTestEarly_noviceoverfull[i,6] > OrderTestEarly_noviceoverfull[i,5] &&
OrderTestEarly_noviceoverfull[i,5] > OrderTestEarly_noviceoverfull[i,4]
OrderTestEarly_noviceoverfull[i,7] <- firstcheck && secondcheck
}
OrderTestLate_noviceoverfull <- matrix(NaN,nrow=nrow(overfullBetayesLatesamples),ncol = 7)
OrderTestLate_noviceoverfull[,1:6] <- overfullBetayesLatesamples[,7:12]
##Late hypothesis: 3 > 2 > 1, 4 > 5 > 6
for(i in 1:nrow(overfullBetayesLatesamples)){
firstcheck <- OrderTestLate_noviceoverfull[i,3] > OrderTestLate_noviceoverfull[i,2] &&
OrderTestLate_noviceoverfull[i,2] > OrderTestLate_noviceoverfull[i,1]
secondcheck <- OrderTestLate_noviceoverfull[i,4] > OrderTestLate_noviceoverfull[i,5] &&
OrderTestLate_noviceoverfull[i,5] > OrderTestLate_noviceoverfull[i,6]
OrderTestLate_noviceoverfull[i,7] <- firstcheck && secondcheck
}
EarlyOrderProb_noviceoverfull <- mean(OrderTestEarly_noviceoverfull[,7])
LateOrderProb_noviceoverfull <- mean(OrderTestLate_noviceoverfull[,7])
EarlyOrderOdds_noviceoverfull <- EarlyOrderProb_noviceoverfull/(1-EarlyOrderProb_noviceoverfull)
LateOrderOdds_noviceoverfull <- LateOrderProb_noviceoverfull/(1-LateOrderProb_noviceoverfull)
PriorOdds_noviceoverfull <- (1/36)/(1-(1/36))
BFEarlyOrder_noviceoverfull <- EarlyOrderOdds_noviceoverfull/PriorOdds_noviceoverfull
BFLateOrder_noviceoverfull <- LateOrderOdds_noviceoverfull/PriorOdds_noviceoverfull
# Posterior predictive accuracy by comp type ------------------------------
yesEarly_bycomp_expert <- matrix(NaN,nrow=5,ncol=6)
noEarly_bycomp_expert <- matrix(NaN,nrow=5,ncol=6)
yesLate_bycomp_expert <- matrix(NaN,nrow=5,ncol=6)
noLate_bycomp_expert <- matrix(NaN,nrow=5,ncol=6)
# Plot beta inferences from raw w/ actual data -------------------------------------------
par(mfrow=c(1,1))
par(mar = c(3.5, 3, 1, 2))
yesEarly_bycomp_expert <- matrix(NaN,nrow=5,ncol=6)
noEarly_bycomp_expert <- matrix(NaN,nrow=5,ncol=6)
yesLate_bycomp_expert <- matrix(NaN,nrow=5,ncol=6)
noLate_bycomp_expert <- matrix(NaN,nrow=5,ncol=6)
testTotal = nExpResponses+nNovResponses
for(i in 1:6){
tempindex <- which(XyesEarly[1:nExpResponses,(i+1)]==1)
yesEarly_bycomp_expert[1,i] = mean(YyesEarly[tempindex])
yesEarly_bycomp_expert[2,i] = sd(YyesEarly[tempindex])
yesEarly_bycomp_expert[3,i] = mean(YyesEarly[(nExpResponses+1):testTotal])
yesEarly_bycomp_expert[4,i] = sd(YyesEarly[(nExpResponses+1):testTotal])
tempindex_novice <- SONAData[which(SONAData$CompType==i),]
yesEarly_bycomp_expert[5,i] =
mean(tempindex_novice$EarlyResponse[which(tempindex_novice$SpeakerEarly==1)])
}
for(i in 1:6){
tempindex = which(XyesLate[1:nExpResponses,i+1]==1)
yesLate_bycomp_expert[1,i] = mean(YyesLate[tempindex])
yesLate_bycomp_expert[2,i] = sd(YyesLate[tempindex])
yesLate_bycomp_expert[3,i] = mean(YyesLate[(nExpResponses+1):testTotal])
yesLate_bycomp_expert[4,i] = sd(YyesLate[(nExpResponses+1):testTotal])
tempindex_novice <- SONAData[which(SONAData$CompType==i),]
yesLate_bycomp_expert[5,i] =
mean(tempindex_novice$LateResponse[which(tempindex_novice$SpeakerLate==1)])
}
ConfInt <- function(Dev,n){
ConfInt = 1.96*(Dev/sqrt(n))
return(ConfInt)
}
plot1 = MainPlot(rawPlotValues_EarlyYes[1,1:3],yesEarly_bycomp_expert[3,1],yesEarly_bycomp_expert[5,1:6],
rawPlotValues_EarlyYes[2:7,1:3],yesEarly_bycomp_expert[1,1:6],'',
if_legend = 1,leftmost = 1)
par(mar = c(3.5, 3, 1, 2))
plot2 = MainPlot(rawPlotValues_LateYes[1,1:3],yesLate_bycomp_expert[3,1],yesLate_bycomp_expert[5,1:6],
rawPlotValues_LateYes[2:7,1:3],yesLate_bycomp_expert[1,1:6],'',
if_legend = 0, leftmost = 0)
# Hypothesis test using Savage-Dickey -------------------------------------
prior_density = dnorm(0,0,.3537)
posterior_density_yesEarly <- rep(NaN,6)
posterior_density_yesLate <- rep(NaN,6)
posterior_12B_density_yesEarly <- rep(NaN,6)
posterior_12B_density_yesLate <- rep(NaN,6)
for(i in 1:6){
tempdif <- rawBetayesEarlysamples[,1]-rawBetayesEarlysamples[,i+1]
posterior_density_yesEarly[i] <- dlogspline(0,logspline(tempdif))
tempdif <- overfullBetayesEarlysamples[,i+6]-overfullBetayesEarlysamples[,i]
posterior_12B_density_yesEarly[i] <- dlogspline(0,logspline(tempdif))
tempdif <- rawBetayesLatesamples[,1]-rawBetayesLatesamples[,i+1]
posterior_density_yesLate[i] <- dlogspline(0,logspline(tempdif))
tempdif <- overfullBetayesLatesamples[,i+6]-overfullBetayesLatesamples[,i]
posterior_12B_density_yesLate[i] <- dlogspline(0,logspline(tempdif))
}
SavDick <- data.frame(matrix(NaN,nrow=6,ncol=4))
names(SavDick) <- c("Yes Early","12B Yes Early","Yes Late","12B Yes Late")
SavDick[,1] <- posterior_density_yesEarly/prior_density
SavDick[,2] <- posterior_12B_density_yesEarly/prior_density
SavDick[,3] <- posterior_density_yesLate/prior_density
SavDick[,4] <- posterior_12B_density_yesLate/prior_density
# Expert TVJ by comp type -------------------------------------
par(mfrow=c(1,2))
EarlyGame_Ill = c(.70,.63,.55,.55,.63,.70)
LateGame_Ill = c(.55,.63,.70,.70,.63,.55)
par(mar = c(3, 4, 2, 2))
TVJ_Early_bycomp <- c(mean(OnlineData$EarlyTVJ[which(OnlineData$CompType==1)]),
mean(OnlineData$EarlyTVJ[which(OnlineData$CompType==2)]),
mean(OnlineData$EarlyTVJ[which(OnlineData$CompType==3)]),
mean(OnlineData$EarlyTVJ[which(OnlineData$CompType==4)]),
mean(OnlineData$EarlyTVJ[which(OnlineData$CompType==5)]),
mean(OnlineData$EarlyTVJ[which(OnlineData$CompType==6)]))
TVJ_Late_bycomp <- c(mean(OnlineData$LateTVJ[which(OnlineData$CompType==1)]),
mean(OnlineData$LateTVJ[which(OnlineData$CompType==2)]),
mean(OnlineData$LateTVJ[which(OnlineData$CompType==3)]),
mean(OnlineData$LateTVJ[which(OnlineData$CompType==4)]),
mean(OnlineData$LateTVJ[which(OnlineData$CompType==5)]),
mean(OnlineData$LateTVJ[which(OnlineData$CompType==6)]))
TVJ_Early_bycomp_boot = matrix(NaN, 6, 2)
TVJ_Late_bycomp_boot = matrix(NaN, 6, 2)
for(i in 1:6){
nIterations = 1000
nSamples = 100
dataVector_EarlyTVJ = OnlineData$EarlyTVJ[which(OnlineData$CompType==i)]
bootRange_EarlyTVJ = BootstrapMean95(dataVector_EarlyTVJ,nIterations = nIterations,nSamples = nSamples)
TVJ_Early_bycomp_boot[i,1] <- bootRange_EarlyTVJ[1]
TVJ_Early_bycomp_boot[i,2] <- bootRange_EarlyTVJ[2]
dataVector_LateTVJ = OnlineData$LateTVJ[which(OnlineData$CompType==i)]
bootRange_LateTVJ = BootstrapMean95(dataVector_LateTVJ,nIterations = nIterations,nSamples = nSamples)
TVJ_Late_bycomp_boot[i,1] <- bootRange_LateTVJ[1]
TVJ_Late_bycomp_boot[i,2] <- bootRange_LateTVJ[2]
}
plot(1:6,TVJ_Early_bycomp,ylim = c(0,1),main = '', xlab = ' ',ylab = '',
col = 'black',bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2.2,lwd =2,pch = 23)
for(i in 1:6){
arrows(x0 = i, y0 = TVJ_Early_bycomp_boot[i,1],
x1 = i, y1 = TVJ_Early_bycomp_boot[i,2],code = 3,
col = 'black',angle = 90, length = .1,lty = 1)
}
xlabels = c('E+','E0','E-','L+','L0','L-')
xat = c(1:6)
title(main="Early Game ", line=.5, cex.main=1.8)
title(ylab="Endorsement Rate", line=2.1, cex.lab=1.8)
title(xlab="Composition Type", line=1.6, cex.lab=1.8)
axis(side=1,pos=0,cex.axis = 1.4,lwd = 2,labels = xlabels,at = xat)
axis(side = 2, pos=.75,cex.axis = 1.5,lwd = 2)
lines(x = c(.75,6.25),y=c(0,0),lwd =2)
abline(v=0)
plot(1:6,TVJ_Late_bycomp,ylim = c(0,1),main = '', xlab = ' ',ylab = '',
col = 'black',bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2.2,lwd =2,pch = 23)
for(i in 1:6){
arrows(x0 = i, y0 = TVJ_Late_bycomp_boot[i,1],
x1 = i, y1 = TVJ_Late_bycomp_boot[i,2],code = 3,
col = 'black',angle = 90, length = .1,lty = 1)
}
title(main="Late Game", line=.5, cex.main=1.8)
title(xlab="Composition Type", line=1.6, cex.lab=1.8)
axis(side=1,pos=0,cex.axis = 1.4,lwd = 2,at = xat,labels = xlabels)
axis(side = 2, pos=.75,cex.axis = 1.5,lwd = 2)
lines(x = c(.75,6.25),y=c(0,0),lwd =2)
# Agreement Test ----------------------------------------------------------
Early_yes <- OnlineData[which(OnlineData$EarlyTVJ==1),]
Early_no <- OnlineData[which(OnlineData$EarlyTVJ==0),]
Late_yes <- OnlineData[which(OnlineData$LateTVJ==1),]
Late_no <- OnlineData[which(OnlineData$LateTVJ==0),]
Agree_Early_yesyes <- Early_yes[which(Early_yes$SpeakerEarly==1),]
#Agree_Early_nono <- Early_no[which(OnlineData$SpeakerEarly==0),]
Agree_Late_yesyes <- Late_yes[which(Late_yes$SpeakerLate==1),]
#Agree_Late_nono <- Late_no[which(OnlineData$SpeakerLate==0),]
#Disagree_Early_yesno <- Early_yes[which(OnlineData$SpeakerEarly==0),]
Disagree_Early_noyes <- Early_no[which(Early_no$SpeakerEarly==1),]
#Disagree_Late_yesno <- Late_yes[which(OnlineData$SpeakerLate==0),]
Disagree_Late_noyes <- Late_no[which(Late_no$SpeakerLate==1),]
Diff_Agree_Early_yesyes <- Agree_Early_yesyes$EarlyResponse - Agree_Early_yesyes$EarlyPrior
#Diff_Agree_Early_nono <- Agree_Early_nono$EarlyResponse - Agree_Early_nono$EarlyPrior
Diff_Agree_Late_yesyes <- Agree_Late_yesyes$LateResponse - Agree_Late_yesyes$LatePrior
#Diff_Agree_Late_nono <- Agree_Late_nono$LateResponse - Agree_Late_nono$LatePrior
#Diff_Disagree_Early_yesno <- Disagree_Early_yesno$EarlyResponse - Disagree_Early_yesno$EarlyPrior
Diff_Disagree_Early_noyes <- Disagree_Early_noyes$EarlyResponse - Disagree_Early_noyes$EarlyPrior
#Diff_Disagree_Late_yesno <- Disagree_Late_yesno$LateResponse - Disagree_Late_yesno$LatePrior
Diff_Disagree_Late_noyes <- Disagree_Late_noyes$LateResponse - Disagree_Late_noyes$LatePrior
Diff_Agree_Early <- c(Diff_Agree_Early_yesyes#,Diff_Agree_Early_nono
)
Diff_Agree_Late <- c(Diff_Agree_Late_yesyes#,#Diff_Agree_Late_nono
)
Diff_Disagree_Early <- c(Diff_Disagree_Early_noyes#,Diff_Disagree_Early_yesno
)
Diff_Disagree_Late <- c(Diff_Disagree_Late_noyes#,Diff_Disagree_Late_yesno
)
Diff_Agree <- c(Diff_Agree_Early,Diff_Agree_Late)
Diff_Disagree <- c(Diff_Disagree_Early,Diff_Disagree_Late)
c1 <- rgb(173,216,230,max = 255, alpha = 130, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 100, names = "lt.pink")
b <- min(c(Diff_Agree,Diff_Disagree)) - 0.001 # Set the minimum for the breakpoints
e <- max(c(Diff_Agree,Diff_Disagree)) # Set the maximum for the breakpoints
ax <- pretty(b:e, n = 12) # Make a neat vector for the breakpoints
hist1 <- hist(Diff_Agree)
hist2 <- hist(Diff_Disagree)
par(mfrow=c(1,1))
par(mar = c(5, 4, 1, 2))
plot(hist1,col = c1,ylim = c(0,200),xlim = c(-1,1),xlab = 'Interpretation - Prior Estimate',main = "Interpretation Shift",
axes = FALSE)
plot(hist2,col = c2,add=TRUE)
abline(v=0,lty=3)
axis(side = 2, pos= -1)
axis(side = 1, pos=0)
legend(-.9,100,legend = c('Agreement','Disagreement'),pch = c(15,15),
col = c(c1,c2),cex = 1.3)
plot(1:6,Expert_inf[1:6,1],ylim = c(0,1),main = MainTitle, xlab = ' ',ylab = '',
col = rgb(red = 220/255, green = 20/255, blue = 60/255),bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2,lwd =2,pch = 10,type = 'n')
Novice_inf <- rawPlotValues_EarlyYes[1,1:3]
Novice_emp <- yesEarly_bycomp_expert[3,1]
Novice_empCon <- yesEarly_bycomp_expert[5,1:6]
Expert_inf <- rawPlotValues_EarlyYes[2:7,1:3]
Expert_emp <- yesEarly_bycomp_expert[1,1:6]
plot(1:6,Expert_inf[1:6,1],ylim = c(0,1),main = MainTitle, xlab = ' ',ylab = '',
col = rgb(red = 220/255, green = 20/255, blue = 60/255),bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2,lwd =2,pch = 10,type = 'n')
plot(1:6,Expert_inf[1:6,1],ylim = c(0,1),main = MainTitle, xlab = ' ',ylab = '',
col = rgb(red = 220/255, green = 20/255, blue = 60/255),bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2,lwd =2,pch = 10,type = 'n')
title(ylab="Interpretation ( /100 games)", line=1.5, cex.lab=1.8)
axis(side=1,pos=0,cex.axis = 1.6,lwd = 2)
axis(side = 2, pos=.75,cex.axis = 1.6,lwd = 2)
lines(x = c(.75,6.25),y=c(0,0),lwd =2)
abline(v=0)
xlabels = c('E+','E0','E-','L+','L0','L-')
Novice_inf <- rawPlotValues_EarlyYes[1,1:3]
Novice_emp <- yesEarly_bycomp_expert[3,1]
Novice_empCon <- yesEarly_bycomp_expert[5,1:6]
Expert_inf <- rawPlotValues_EarlyYes[2:7,1:3]
Expert_emp <- yesEarly_bycomp_expert[1,1:6]
MainTitle <- " "
plot(1:6,Expert_inf[1:6,1],ylim = c(0,1),main = MainTitle, xlab = ' ',ylab = '',
col = rgb(red = 220/255, green = 20/255, blue = 60/255),bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2,lwd =2,pch = 10,type = 'n')
title(xlab="Composition Type", line=1.8, cex.lab=1.8)
plot(1:6,Expert_inf[1:6,1],ylim = c(0,1),main = MainTitle, xlab = ' ',ylab = '',
col = rgb(red = 220/255, green = 20/255, blue = 60/255),bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2,lwd =2,pch = 10,type = 'n')
title(ylab="Interpretation ( /100 games)", line=1.5, cex.lab=1.8)
xlabels = c('E+','E0','E-','L+','L0','L-')
xat = c(1:6)
axis(side=1,pos=0,cex.axis = 1.6,lwd = 2,labels = xlabels,at = xat)
axis(side = 2, pos=.75,cex.axis = 1.6,lwd = 2)
lines(x = c(.75,6.25),y=c(0,0),lwd =2)
abline(v=0)
legend(3.1,.37,legend = c('Novice (Inferred)','Expert (Inferred)','Novice by Condition (Empirical)',
'Novice Overall (Empirical)','Expert (Empirical)'),
pch = c(NA,10,17,NA,16),lty = c(1,NA,NA,3,NA),lwd = c(2,2,NA,3,NA),pt.cex = c(NA,2,2,NA,2),
col = c(rgb(red = 51/255, green = 153/255, blue = 0/255),
rgb(red = 220/255, green = 20/255, blue = 60/255),
'#7B68EE',col=rgb(red=0,green=0,blue=0),
'black'),
cex = 1.3,bty = 'n')
plot(1:6,Expert_inf[1:6,1],ylim = c(0,1),main = MainTitle, xlab = ' ',ylab = '',
col = rgb(red = 220/255, green = 20/255, blue = 60/255),bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2,lwd =2,pch = 10,type = 'n')
title(ylab="Interpretation ( /100 games)", line=1.5, cex.lab=1.8)
xlabels = c('E+','E0','E-','L+','L0','L-')
xat = c(1:6)
axis(side=1,pos=0,cex.axis = 1.6,lwd = 2,labels = xlabels,at = xat)
axis(side = 2, pos=.75,cex.axis = 1.6,lwd = 2)
lines(x = c(.75,6.25),y=c(0,0),lwd =2)
abline(v=0)
legend(3.1,.37,legend = c('Novice (Inferred)','Expert (Inferred)','Novice by Condition (Empirical)',
'Novice Overall (Empirical)','Expert (Empirical)'),
pch = c(NA,10,17,NA,16),lty = c(1,NA,NA,3,NA),lwd = c(2,2,NA,3,NA),pt.cex = c(NA,2,2,NA,2),
col = c(rgb(red = 51/255, green = 153/255, blue = 0/255),
rgb(red = 220/255, green = 20/255, blue = 60/255),
'#7B68EE',col=rgb(red=0,green=0,blue=0),
'black'),
cex = 1.3,bty = 'n')
lines(x= c(.75,8),y=c(Novice_emp,Novice_emp),col=rgb(red=0,green=0,blue=0),lwd=3,lty=3)
points(.85:5.85,Novice_empCon[1:6],col='#7B68EE',pch = 17,cex = 2)
lines(x= c(.75,8),y = c(Novice_inf[1],Novice_inf[1]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lwd=2)
lines(x= c(.75,8),y = c(Novice_inf[2],Novice_inf[2]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lty = 2,lwd=2)
lines(x= c(.75,8),y = c(Novice_inf[3],Novice_inf[3]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lty = 2,lwd=2)
points(1.15:6.15,Expert_emp[1:6],col='black',pch = 16,cex = 2)
plot(1:6,Expert_inf[1:6,1],ylim = c(0,1),main = MainTitle, xlab = ' ',ylab = '',
col = rgb(red = 220/255, green = 20/255, blue = 60/255),bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2,lwd =2,pch = 10)
title(xlab="Composition Type", line=1.8, cex.lab=1.8)
title(ylab="Interpretation ( /100 games)", line=1.5, cex.lab=1.8)
xlabels = c('E+','E0','E-','L+','L0','L-')
xat = c(1:6)
axis(side=1,pos=0,cex.axis = 1.6,lwd = 2,labels = xlabels,at = xat)
axis(side = 2, pos=.75,cex.axis = 1.6,lwd = 2)
lines(x= c(.75,8),y = c(Novice_inf[1],Novice_inf[1]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lwd=2)
lines(x= c(.75,8),y = c(Novice_inf[2],Novice_inf[2]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lty = 2,lwd=2)
lines(x= c(.75,8),y = c(Novice_inf[3],Novice_inf[3]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lty = 2,lwd=2)
for(i in 1:6){
arrows(x0 = i, y0 = Expert_inf[i,2],
x1 = i, y1 = Expert_inf[i,3],code = 3,
col = rgb(red = 220/255, green = 20/255, blue = 60/255),
angle = 90, length = .1,lwd = 2)
}
points(1.15:6.15,Expert_emp[1:6],col='black',pch = 16,cex = 2)
legend(3.1,.37,legend = c('Novice (Inferred)','Expert (Inferred)','Novice by Condition (Empirical)',
'Novice Overall (Empirical)','Expert (Empirical)'),
pch = c(NA,10,17,NA,16),lty = c(1,NA,NA,3,NA),lwd = c(2,2,NA,3,NA),pt.cex = c(NA,2,2,NA,2),
col = c(rgb(red = 51/255, green = 153/255, blue = 0/255),
rgb(red = 220/255, green = 20/255, blue = 60/255),
'#7B68EE',col=rgb(red=0,green=0,blue=0),
'black'),
cex = 1.3,bty = 'n')
lines(x= c(.75,8),y=c(Novice_emp,Novice_emp),col=rgb(red=0,green=0,blue=0),lwd=3,lty=3)
points(.85:5.85,Novice_empCon[1:6],col='#7B68EE',pch = 17,cex = 2)
lines(x = c(.75,6.25),y=c(0,0),lwd =2)
abline(v=0)
Novice_inf <- rawPlotValues_LateYes[1,1:3]
Novice_emp <- yesLate_bycomp_expert[3,1]
Novice_empCon <- yesLate_bycomp_expert[5,1:6]
Expert_inf <- rawPlotValues_LateYes[2:7,1:3]
Expert_emp <- yesLate_bycomp_expert[1,1:6]
MainTitle <- " "
plot(1:6,Expert_inf[1:6,1],ylim = c(0,1),main = MainTitle, xlab = ' ',ylab = '',
col = rgb(red = 220/255, green = 20/255, blue = 60/255),bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2,lwd =2,pch = 10,type='n')
title(xlab="Composition Type", line=1.8, cex.lab=1.8)
title(ylab="Interpretation ( /100 games)", line=1.5, cex.lab=1.8)
xlabels = c('E+','E0','E-','L+','L0','L-')
xat = c(1:6)
axis(side=1,pos=0,cex.axis = 1.6,lwd = 2,labels = xlabels,at = xat)
axis(side = 2, pos=.75,cex.axis = 1.6,lwd = 2)
lines(x = c(.75,6.25),y=c(0,0),lwd =2)
abline(v=0)
legend(3.1,.37,legend = c('Novice (Inferred)','Expert (Inferred)','Novice by Condition (Empirical)',
'Novice Overall (Empirical)','Expert (Empirical)'),
pch = c(NA,10,17,NA,16),lty = c(1,NA,NA,3,NA),lwd = c(2,2,NA,3,NA),pt.cex = c(NA,2,2,NA,2),
col = c(rgb(red = 51/255, green = 153/255, blue = 0/255),
rgb(red = 220/255, green = 20/255, blue = 60/255),
'#7B68EE',col=rgb(red=0,green=0,blue=0),
'black'),
cex = 1.3,bty = 'n')
plot(1:6,Expert_inf[1:6,1],ylim = c(0,1),main = MainTitle, xlab = ' ',ylab = '',
col = rgb(red = 220/255, green = 20/255, blue = 60/255),bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2,lwd =2,pch = 10,type='n')
title(xlab="Composition Type", line=1.8, cex.lab=1.8)
title(ylab="Interpretation ( /100 games)", line=1.5, cex.lab=1.8)
xlabels = c('E+','E0','E-','L+','L0','L-')
xat = c(1:6)
axis(side=1,pos=0,cex.axis = 1.6,lwd = 2,labels = xlabels,at = xat)
axis(side = 2, pos=.75,cex.axis = 1.6,lwd = 2)
par(mar = c(3.5, 3, 1, 2))
plot(1:6,Expert_inf[1:6,1],ylim = c(0,1),main = MainTitle, xlab = ' ',ylab = '',
col = rgb(red = 220/255, green = 20/255, blue = 60/255),bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2,lwd =2,pch = 10)
plot(1:6,Expert_inf[1:6,1],ylim = c(0,1),main = MainTitle, xlab = ' ',ylab = '',
col = rgb(red = 220/255, green = 20/255, blue = 60/255),bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2,lwd =2,pch = 10,type='n')
title(xlab="Composition Type", line=1.8, cex.lab=1.8)
title(ylab="Interpretation ( /100 games)", line=1.5, cex.lab=1.8)
xlabels = c('E+','E0','E-','L+','L0','L-')
xat = c(1:6)
axis(side=1,pos=0,cex.axis = 1.6,lwd = 2,labels = xlabels,at = xat)
axis(side = 2, pos=.75,cex.axis = 1.6,lwd = 2)
lines(x = c(.75,6.25),y=c(0,0),lwd =2)
abline(v=0)
lines(x= c(.75,8),y = c(Novice_inf[1],Novice_inf[1]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lwd=2)
lines(x= c(.75,8),y = c(Novice_inf[2],Novice_inf[2]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lty = 2,lwd=2)
lines(x= c(.75,8),y = c(Novice_inf[3],Novice_inf[3]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lty = 2,lwd=2)
plot(1:6,Expert_inf[1:6,1],ylim = c(0,1),main = MainTitle, xlab = ' ',ylab = '',
col = rgb(red = 220/255, green = 20/255, blue = 60/255),bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2,lwd =2,pch = 10,type='n')
title(xlab="Composition Type", line=1.8, cex.lab=1.8)
title(ylab="Interpretation ( /100 games)", line=1.5, cex.lab=1.8)
xlabels = c('E+','E0','E-','L+','L0','L-')
xat = c(1:6)
axis(side=1,pos=0,cex.axis = 1.6,lwd = 2,labels = xlabels,at = xat)
axis(side = 2, pos=.75,cex.axis = 1.6,lwd = 2)
lines(x = c(.75,6.25),y=c(0,0),lwd =2)
abline(v=0)
lines(x= c(.75,8),y=c(Novice_emp,Novice_emp),col=rgb(red=0,green=0,blue=0),lwd=3,lty=3)
points(.85:5.85,Novice_empCon[1:6],col='#7B68EE',pch = 17,cex = 2)
lines(x= c(.75,8),y = c(Novice_inf[1],Novice_inf[1]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lwd=2)
lines(x= c(.75,8),y = c(Novice_inf[2],Novice_inf[2]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lty = 2,lwd=2)
lines(x= c(.75,8),y = c(Novice_inf[3],Novice_inf[3]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lty = 2,lwd=2)
points(1.15:6.15,Expert_emp[1:6],col='black',pch = 16,cex = 2)
Novice_inf <- rawPlotValues_LateYes[1,1:3]
Novice_emp <- yesLate_bycomp_expert[3,1]
Novice_empCon <- yesLate_bycomp_expert[5,1:6]
Expert_inf <- rawPlotValues_LateYes[2:7,1:3]
Expert_emp <- yesLate_bycomp_expert[1,1:6]
MainTitle <- " "
plot(1:6,Expert_inf[1:6,1],ylim = c(0,1),main = MainTitle, xlab = ' ',ylab = '',
col = rgb(red = 220/255, green = 20/255, blue = 60/255),bty = 'n',xlim = c(.75,6),frame.plot = FALSE,
axes = FALSE,cex = 2,lwd =2,pch = 10)
title(xlab="Composition Type", line=1.8, cex.lab=1.8)
title(ylab="Interpretation ( /100 games)", line=1.5, cex.lab=1.8)
xlabels = c('E+','E0','E-','L+','L0','L-')
xat = c(1:6)
axis(side=1,pos=0,cex.axis = 1.6,lwd = 2,labels = xlabels,at = xat)
axis(side = 2, pos=.75,cex.axis = 1.6,lwd = 2)
lines(x= c(.75,8),y = c(Novice_inf[1],Novice_inf[1]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lwd=2)
lines(x= c(.75,8),y = c(Novice_inf[2],Novice_inf[2]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lty = 2,lwd=2)
lines(x= c(.75,8),y = c(Novice_inf[3],Novice_inf[3]),col = rgb(red = 51/255, green = 153/255, blue = 0/255),lty = 2,lwd=2)
for(i in 1:6){
arrows(x0 = i, y0 = Expert_inf[i,2],
x1 = i, y1 = Expert_inf[i,3],code = 3,
col = rgb(red = 220/255, green = 20/255, blue = 60/255),
angle = 90, length = .1,lwd = 2)
}
points(1.15:6.15,Expert_emp[1:6],col='black',pch = 16,cex = 2)
if(if_legend==1){
legend(3.1,.37,legend = c('Novice (Inferred)','Expert (Inferred)','Novice by Condition (Empirical)',
'Novice Overall (Empirical)','Expert (Empirical)'),
pch = c(NA,10,17,NA,16),lty = c(1,NA,NA,3,NA),lwd = c(2,2,NA,3,NA),pt.cex = c(NA,2,2,NA,2),
col = c(rgb(red = 51/255, green = 153/255, blue = 0/255),
rgb(red = 220/255, green = 20/255, blue = 60/255),
'#7B68EE',col=rgb(red=0,green=0,blue=0),
'black'),
cex = 1.3,bty = 'n')
}
lines(x= c(.75,8),y=c(Novice_emp,Novice_emp),col=rgb(red=0,green=0,blue=0),lwd=3,lty=3)
points(.85:5.85,Novice_empCon[1:6],col='#7B68EE',pch = 17,cex = 2)
lines(x = c(.75,6.25),y=c(0,0),lwd =2)
abline(v=0)
