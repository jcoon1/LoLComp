## distributed so that there's one for each typ of composition.
## Comp is the specific composition because there are 2 exemplars
## for each type of composition. CompType goes 1:6, meaning (E+,E0,E-,L+,LO,L-).
## CompBorderline collapses this further into 1:3 meaning (+,0,-).
## Response is participants' interpretation, TVJ is whether they would endorse
## the generalization themselves, and Prior is their own expectations for how
## often the generalization would apply (Early & Late for each)
OnlineData <- read_csv("OnlineData.csv",col_names=TRUE)
## How many LoL people participated
nExperts = max(OnlineData$Participant)
## Total number of trials of interest for each participant
nItems = 12
## Identify whether this is an example of agreement or disagreement. 0 = disagree,
## 1 = agree, 99 = not a trial of interest
OnlineData$AgreeEarly <- rep(99,nrow(OnlineData))
OnlineData$AgreeLate <- rep(99,nrow(OnlineData))
for(i in 1:nrow(OnlineData)){
if(OnlineData$SpeakerEarly[i]==1){
OnlineData$AgreeEarly[i] <- OnlineData$EarlyTVJ[i] == 1
}
if(OnlineData$SpeakerLate[i]==1){
OnlineData$AgreeLate[i] <- OnlineData$LateTVJ[i] == 1
}
}
## Same structure for naive data; no need to worry about agreement/disagreement
SONAData <- read_csv("SONAData.csv",col_names=TRUE)
nNovices = max(SONAData$Participant)
# Prep Data for Early Condition ---------------------------------------------------------------
## Treating generlizations about early game and late game as separate statements
## (and thus essentially replications of each other)
## First beta is naive participant interpretation, the next 6 are experienced
## by condition
nBeta = 7
bPrec <- matrix(0,nrow = nBeta, ncol = nBeta)
for(i in 1:nBeta){
bPrec[i,i] <- 16
}
## Set up a count of how many times each expert participant agreed and disagreed
## with the speaker
nAgree_early <- rep(NaN,nExperts)
nDisagree_early <- rep(NaN,nExperts)
for(i in 1:nExperts){
temp <- OnlineData[which(OnlineData$Participant==i),]
nAgree_early[i] <- length(which(temp$AgreeEarly==1))
nDisagree_early[i] <- length(which(temp$AgreeEarly==0))
}
nExperts_agree_early <- length(which(nAgree_early>0))
nExperts_disagree_early <- length(which(nDisagree_early>0))
nAgree_early <- rep(NaN,nExperts_agree_early)
nDisagree_early <- rep(NaN,nExperts_disagree_early)
ticker = 1
for(i in 1:nExperts){
temp <- OnlineData[which(OnlineData$Participant==i),]
if(length(which(temp$AgreeEarly==1))>0){
nAgree_early[ticker] <- length(which(temp$AgreeEarly==1))
ticker = ticker+1
}
}
ticker = 1
for(i in 1:nExperts){
temp <- OnlineData[which(OnlineData$Participant==i),]
if(length(which(temp$AgreeEarly==0))>0){
nDisagree_early[ticker] <- length(which(temp$AgreeEarly==0))
ticker = ticker+1
}
}
## preallocate stuff
X_agree_early <- matrix(0, nrow = sum(nAgree_early),ncol = nBeta)
Y_agree_early <- rep(NaN,sum(nAgree_early))
Participant_list_agree_early <- rep(NaN,sum(nAgree_early))
X_disagree_early <- matrix(0, nrow = sum(nDisagree_early),ncol = nBeta)
Y_disagree_early <- rep(NaN,sum(nDisagree_early))
Participant_list_disagree_early <- rep(NaN,sum(nDisagree_early))
Prior_early <- rep(NaN,sum(nDisagree_early))
tickerAgree_early = 1
tickerDisagree_early = 1
## Make data, containing only examples of expert agreement. Y is their interpretation.
## "Prior" is the X variable (input) for the latent mixture part of the model and is thus
## only needed for disagreements, since that's the only part of the model with the mixture.
## X is the indicator matrix for turning the betas on and off as appropriate in the main
## model. Since these are only ever expert participants, the first column is always 0.
## For each row, there will always be a single column with a 1 corresponding to the condition.
## Participant_list is a vector identifying which participant is responsible for
## each data point.
for(i in 1:nrow(OnlineData)){
if(OnlineData$AgreeEarly[i]==1){
Y_agree_early[tickerAgree_early] <- OnlineData$EarlyResponse[i]
X_agree_early[tickerAgree_early,(OnlineData$CompType[i]+1)] <- 1
Participant_list_agree_early[tickerAgree_early] <- OnlineData$Participant[i]
tickerAgree_early = tickerAgree_early+1
}
if(OnlineData$AgreeEarly[i]==0){
Y_disagree_early[tickerDisagree_early] <- OnlineData$EarlyResponse[i]
Prior_early[tickerDisagree_early] <- OnlineData$EarlyPrior[i]
X_disagree_early[tickerDisagree_early,(OnlineData$CompType[i]+1)] <- 1
Participant_list_disagree_early[tickerDisagree_early] <- OnlineData$Participant[i]
tickerDisagree_early = tickerDisagree_early+1
}
}
## Fancy indexing matrix that keeps track of trial number for looping purposes.
## The agree version just needs to move through Participant_list, X, and Y. The
## disagree version needs to also move through Prior. In both cases, row is
## participant, and column is how many agrees/disagrees that participant has
## done so far. There are only 48 rows because there is a participant who
## always disagreed and a participant who always agreed. It should still be
## fine because even though the model only cycles through 48 participants,
## it identifies participant number by using this index matrix to find where
## it should be in the Participant_list vectors, which skip a participant ID
## where appropriate.
index_agree_early <- matrix(NaN, nrow = nExperts_agree_early, ncol = (nItems/2))
index_disagree_early <- matrix(NaN, nrow = nExperts_disagree_early, ncol = (nItems/2))
for(i in 1:nExperts_agree_early){
for(j in 1:nAgree_early[i]){
index_agree_early[i,j] <- j + sum(nAgree_early[1:i]) - nAgree_early[i]
}
}
for(i in 1:nExperts_disagree_early){
for(j in 1:nDisagree_early[i]){
index_disagree_early[i,j] <- j + sum(nDisagree_early[1:i]) - nDisagree_early[i]
}
}
Novice_early <- length(which(SONAData$SpeakerEarly==1))
## X and Y for novices. X is always just a 1 in the first column because these
## are all novice participants
X_nov_early <- matrix(0, nrow = Novice_early, ncol = nBeta)
X_nov_early[,1] <- rep(1,Novice_early)
ticker = 1
Y_nov_early <- rep(NaN, Novice_early)
for(i in 1:nrow(SONAData)){
if(SONAData$SpeakerEarly[i]==1){
Y_nov_early[ticker] <- SONAData$EarlyResponse[i]
ticker = ticker + 1
}
}
# Run early condition in JAGS (add phi) -------------------------------------------
nSamples = 4000
DIC <- rep(NaN,6)
X_agree <- X_agree_early
Y_agree <- Y_agree_early
## Which participant produced each data point
Participant_list_agree <- Participant_list_agree_early
## How many generalizations did each participant agree with
nAgree <- nAgree_early
X_disagree <- X_disagree_early
Y_disagree <- Y_disagree_early
## Which participant produced each data point
Participant_list_disagree <- Participant_list_disagree_early
## Prior estimates for each disagreement
Prior <- Prior_early
## How many generalizations did each participant disagree with
nDisagree <- nDisagree_early
X_nov <- X_nov_early
Y_nov <- Y_nov_early
nNovices <- nNovices
nTrials <- length(which(SONAData$SpeakerEarly[1:12]==1))
bPrec <- bPrec
nBeta <- nBeta
## Total experts
nExperts <- nExperts
## Number of experts who agreed and disagreed with any generalizations
nExperts_agree <- nExperts_agree_early
nExperts_disagree <- nExperts_disagree_early
index_agree <- index_agree_early
index_disagree <- index_disagree_early
data <- list("X_agree","Y_agree","Participant_list_agree","nAgree",
"X_disagree","Y_disagree","Participant_list_disagree","Prior","nDisagree",
"bPrec","nBeta","index_agree","index_disagree",
"nExperts","nExperts_agree","nExperts_disagree",
"nNovices","X_nov","Y_nov","nTrials") # to be passed on to JAGS
# parameters to be monitored:
parameters <- c("BETA","tau","sigma_exp","sigma_con","sigma_nov","alpha",
"phi_disagree",
"psi_disagree","psi_disagree_bern","sigma_psi")
#Fixed initializations (Have to have a list in a list for jags, for more than one chain, add another sub list)
myinits <- list(list("BETA" = runif(7,-.5,.5)))
# The following command calls JAGS with specific options.
#This is for running 1 chain (use code below for faster multiple chains)
samples <- jags(data, #inits=myinits,
parameters.to.save=parameters,
model.file="LoLComp_contaminant.txt", n.chains=3,n.burnin = 1000, n.iter=3000, DIC=T)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
Beta_Early_add_phi_samples <- samples$BUGSoutput$sims.list$BETA
alpha_Early_add_phi_samples <- samples$BUGSoutput$sims.list$alpha
phi_Early_add_phi_samples <- samples$BUGSoutput$sims.list$psi_disagree
psi_Early_add_phi_samples <- samples$BUGSoutput$sims.list$psi_disagree_bern
Phi_Early_add_phi_samples <- samples$BUGSoutput$sims.list$phi_disagree
SigmaExp_Early_add_phi_samples <- samples$BUGSoutput$sims.list$sigma_exp
SigmaCon_Early_add_phi_samples <- samples$BUGSoutput$sims.list$sigma_con
SigmaNov_Early_add_phi_samples <- samples$BUGSoutput$sims.list$sigma_nov
Tau_Early_add_phi_samples <- samples$BUGSoutput$sims.list$tau
summary_add_phi_Early <- samples$BUGSoutput$summary
DIC[1] <- samples$BUGSoutput$DIC
## Test the fancy indexing matrix to make sure it's built properly
test_vector_agree <- rep(NaN, sum(nAgree_early))
ticker = 1
for(i in 1:nExperts_agree){
for(j in 1:nAgree[i]){
test_vector_agree[ticker] <- index_agree[i,j]
ticker = ticker+1
}
}
test_vector_disagree <- rep(NaN, sum(nDisagree_early))
ticker = 1
for(i in 1:nExperts_disagree){
for(j in 1:nDisagree[i]){
test_vector_disagree[ticker] <- index_disagree[i,j]
ticker = ticker+1
}
}
# Prep Data for Late Condition ---------------------------------------------------------------
##  Repeat everything for the generalizations about the late game
nBeta = 7
bPrec <- matrix(0,nrow = nBeta, ncol = nBeta)
for(i in 1:nBeta){
bPrec[i,i] <- 16
}
nAgree_late <- rep(NaN,nExperts)
nDisagree_late <- rep(NaN,nExperts)
for(i in 1:nExperts){
temp <- OnlineData[which(OnlineData$Participant==i),]
nAgree_late[i] <- length(which(temp$AgreeLate==1))
nDisagree_late[i] <- length(which(temp$AgreeLate==0))
}
nExperts_agree_late <- length(which(nAgree_late>0))
nExperts_disagree_late <- length(which(nDisagree_late>0))
nAgree_late <- rep(NaN,nExperts_agree_late)
nDisagree_late <- rep(NaN,nExperts_disagree_late)
ticker = 1
for(i in 1:nExperts){
temp <- OnlineData[which(OnlineData$Participant==i),]
if(length(which(temp$AgreeLate==1))>0){
nAgree_late[ticker] <- length(which(temp$AgreeLate==1))
ticker = ticker+1
}
}
ticker = 1
for(i in 1:nExperts){
temp <- OnlineData[which(OnlineData$Participant==i),]
if(length(which(temp$AgreeLate==0))>0){
nDisagree_late[ticker] <- length(which(temp$AgreeLate==0))
ticker = ticker+1
}
}
X_agree_late <- matrix(0, nrow = sum(nAgree_late),ncol = nBeta)
Y_agree_late <- rep(NaN,sum(nAgree_late))
Participant_list_agree_late <- rep(NaN,sum(nAgree_late))
X_disagree_late <- matrix(0, nrow = sum(nDisagree_late),ncol = nBeta)
Y_disagree_late <- rep(NaN,sum(nDisagree_late))
Participant_list_disagree_late <- rep(NaN,sum(nDisagree_late))
Prior_late <- rep(NaN,sum(nDisagree_late))
tickerAgree_late = 1
tickerDisagree_late = 1
for(i in 1:nrow(OnlineData)){
if(OnlineData$AgreeLate[i]==1){
Y_agree_late[tickerAgree_late] <- OnlineData$LateResponse[i]
X_agree_late[tickerAgree_late,(OnlineData$CompType[i]+1)] <- 1
Participant_list_agree_late[tickerAgree_late] <- OnlineData$Participant[i]
tickerAgree_late = tickerAgree_late+1
}
if(OnlineData$AgreeLate[i]==0){
Y_disagree_late[tickerDisagree_late] <- OnlineData$LateResponse[i]
Prior_late[tickerDisagree_late] <- OnlineData$LatePrior[i]
X_disagree_late[tickerDisagree_late,(OnlineData$CompType[i]+1)] <- 1
Participant_list_disagree_late[tickerDisagree_late] <- OnlineData$Participant[i]
tickerDisagree_late = tickerDisagree_late+1
}
}
index_agree_late <- matrix(NaN, nrow = nExperts_agree_late, ncol = (nItems/2))
index_disagree_late <- matrix(NaN, nrow = nExperts_disagree_late, ncol = (nItems/2))
for(i in 1:nExperts_agree_late){
for(j in 1:nAgree_late[i]){
index_agree_late[i,j] <- j + sum(nAgree_late[1:i]) - nAgree_late[i]
}
}
for(i in 1:nExperts_disagree_late){
for(j in 1:nDisagree_late[i]){
index_disagree_late[i,j] <- j + sum(nDisagree_late[1:i]) - nDisagree_late[i]
}
}
Novice_late <- length(which(SONAData$SpeakerLate==1))
X_nov_late <- matrix(0, nrow = Novice_late, ncol = nBeta)
X_nov_late[,1] <- rep(1,Novice_late)
ticker = 1
Y_nov_late <- rep(NaN, Novice_late)
for(i in 1:nrow(SONAData)){
if(SONAData$SpeakerLate[i]==1){
Y_nov_late[ticker] <- SONAData$LateResponse[i]
ticker = ticker + 1
}
}
# Run late condition in JAGS (add phi) ----------------------------------------------
nSamples = 4000
X_agree <- X_agree_late
Y_agree <- Y_agree_late
Participant_list_agree <- Participant_list_agree_late
nAgree <- nAgree_late
X_disagree <- X_disagree_late
Y_disagree <- Y_disagree_late
Participant_list_disagree <- Participant_list_disagree_late
Prior <- Prior_late
nDisagree <- nDisagree_late
X_nov <- X_nov_late
Y_nov <- Y_nov_late
nNovices <- nNovices
nTrials <- length(which(SONAData$SpeakerLate[1:12]==1))
bPrec <- bPrec
nBeta <- nBeta
nExperts <- nExperts
nExperts_agree <- nExperts_agree_late
nExperts_disagree <- nExperts_disagree_late
index_agree <- index_agree_late
index_disagree <- index_disagree_late
data <- list("X_agree","Y_agree","Participant_list_agree","nAgree",
"X_disagree","Y_disagree","Participant_list_disagree","Prior","nDisagree",
"bPrec","nBeta","index_agree","index_disagree",
"nExperts","nExperts_agree","nExperts_disagree",
"nNovices","X_nov","Y_nov","nTrials") # to be passed on to JAGS
# parameters to be monitored:
parameters <- c("BETA","tau","sigma_exp","sigma_con","sigma_nov","alpha",
"phi_disagree","psi_disagree","psi_disagree_bern","sigma_psi")
#Fixed initializations (Have to have a list in a list for jags, for more than one chain, add another sub list)
myinits <- list(list("BETA" = runif(7,-.5,.5)))
# The following command calls JAGS with specific options.
#This is for running 1 chain (use code below for faster multiple chains)
samples <- jags(data, #inits=myinits,
parameters.to.save=parameters,
model.file="LoLComp_contaminant.txt", n.chains=3,n.burnin = 1000, n.iter=3000, DIC=T)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
Beta_Late_add_phi_samples <- samples$BUGSoutput$sims.list$BETA
alpha_Late_add_phi_samples <- samples$BUGSoutput$sims.list$alpha
phi_Late_add_phi_samples <- samples$BUGSoutput$sims.list$psi_disagree
Phi_Late_add_phi_samples <- samples$BUGSoutput$sims.list$phi_disagree
psi_Late_add_phi_samples <- samples$BUGSoutput$sims.list$psi_disagree_bern
SigmaExp_Late_add_phi_samples <- samples$BUGSoutput$sims.list$sigma_exp
SigmaCon_Late_add_phi_samples <- samples$BUGSoutput$sims.list$sigma_con
SigmaNov_Late_add_phi_samples <- samples$BUGSoutput$sims.list$sigma_nov
Tau_Late_add_phi_samples <- samples$BUGSoutput$sims.list$tau
summary_add_phi_Late <- samples$BUGSoutput$summary
DIC[4] <- samples$BUGSoutput$DIC
test_vector_agree <- rep(NaN, sum(nAgree_late))
ticker = 1
for(i in 1:nExperts_agree){
for(j in 1:nAgree[i]){
test_vector_agree[ticker] <- index_agree[i,j]
ticker = ticker+1
}
}
test_vector_disagree <- rep(NaN, sum(nDisagree_late))
ticker = 1
for(i in 1:nExperts_disagree){
for(j in 1:nDisagree[i]){
test_vector_disagree[ticker] <- index_disagree[i,j]
ticker = ticker+1
}
}
# Make a fancy plot where color indicates psi_bern (add phi) ---------------------------
par(mar = c(4.5, 4, 1, 1))
X_prior_graph_latentMix_psi <- cbind(Prior_early,
colMeans(psi_Early_add_phi_samples))
disagree_plot = matrix(NaN,nrow = nrow(X_prior_graph_latentMix_psi),ncol = 5)
disagree_plot[,1] = X_prior_graph_latentMix_psi[,1]
disagree_plot[,2] = Y_disagree_early
disagree_plot[,3] = X_prior_graph_latentMix_psi[,2]
for(i in 1:nrow(X_prior_graph_latentMix_psi)){
disagree_plot[i,4] = which(X_disagree_early[i,]==1)-1
disagree_plot[i,5] = which(X_disagree_early[i,]==1)-1
if(disagree_plot[i,4]>3){
disagree_plot[i,5] <- 7-disagree_plot[i,4]
}
}
plot(disagree_plot[,1],disagree_plot[,2],col=rgb(disagree_plot[,3],0,0),
xlim = c(0,1), ylim = c(0,1), xlab = "prior",ylab="interpretation", main= "early add phi")
abline(a=0,b=1,lty = 3)
text(disagree_plot[,1],disagree_plot[,2],label = disagree_plot[,4],col=rgb(disagree_plot[,3],0,0))
X_prior_graph_latentMix_psi_late <- cbind(Prior_late,
colMeans(psi_Late_add_phi_samples))
disagree_plot_late = matrix(NaN,nrow = nrow(X_prior_graph_latentMix_psi_late),ncol = 5)
disagree_plot_late[,1] = X_prior_graph_latentMix_psi_late[,1]
disagree_plot_late[,2] = Y_disagree_late
disagree_plot_late[,3] = X_prior_graph_latentMix_psi_late[,2]
for(i in 1:nrow(X_prior_graph_latentMix_psi_late)){
disagree_plot_late[i,4] = which(X_disagree_late[i,]==1)-1
disagree_plot_late[i,5] = which(X_disagree_late[i,]==1)-1
if(disagree_plot_late[i,4]>3){
disagree_plot_late[i,5] <- 7-disagree_plot_late[i,4]
}
}
plot(disagree_plot_late[,1],disagree_plot_late[,2],col=rgb(disagree_plot_late[,3],0,0),
xlim = c(0,1), ylim = c(0,1), xlab = "prior",ylab="interpretation",type = 'n', main = "late add phi")
text(disagree_plot_late[,1],disagree_plot_late[,2],label = disagree_plot_late[,4],col=rgb(disagree_plot_late[,3],0,0))
abline(a=0,b=1,lty = 3)
# Compare expert and novice sigmas ----------------------------------------
SigmaTest_yesEarly <- matrix(NaN,nrow = length(SigmaExp_Early_add_phi_samples),ncol = 2)
SigmaTest_yesLate <- matrix(NaN,nrow = length(SigmaExp_Late_add_phi_samples),ncol = 2)
SigmaDiff_yesEarly <- rep(NaN,length(SigmaExp_Early_add_phi_samples))
SigmaDiff_yesLate <- rep(NaN,length(SigmaExp_Late_add_phi_samples))
for(i in 1:length(SigmaExp_Early_add_phi_samples)){
SigmaTest_yesEarly[i,1] <- Tau_Early_add_phi_samples[i]^2/
(Tau_Early_add_phi_samples[i]^2 + SigmaExp_Early_add_phi_samples[i]^2)
SigmaTest_yesEarly[i,2] <- Tau_Early_add_phi_samples[i]^2/
(Tau_Early_add_phi_samples[i]^2 + SigmaNov_Early_add_phi_samples[i]^2)
SigmaDiff_yesEarly[i] <- SigmaExp_Early_add_phi_samples[i]-SigmaNov_Early_add_phi_samples[i]
SigmaDiff_yesLate[i] <- SigmaExp_Late_add_phi_samples[i]-SigmaNov_Late_add_phi_samples[i]
SigmaTest_yesLate[i,1] <- Tau_Late_add_phi_samples[i]^2/
(Tau_Late_add_phi_samples[i]^2 + SigmaExp_Late_add_phi_samples[i]^2)
SigmaTest_yesLate[i,2] <- Tau_Late_add_phi_samples[i]^2/
(Tau_Late_add_phi_samples[i]^2 + SigmaNov_Late_add_phi_samples[i]^2)
}
sortSigmaDiff_yesEarly <- sort(SigmaDiff_yesEarly)
sortSigmaDiff_yesLate <- sort(SigmaDiff_yesLate)
ind975 = length(sortSigmaDiff_yesEarly)*.975
ind075 = length(sortSigmaDiff_yesEarly)*.075
mean(SigmaDiff_yesEarly)
sortSigmaDiff_yesEarly[ind975]
sortSigmaDiff_yesEarly[ind075]
mean(SigmaDiff_yesLate)
sortSigmaDiff_yesLate[ind975]
sortSigmaDiff_yesLate[ind075]
sortSigmaTest_yesEarly <- matrix(NaN,nrow = length(SigmaExp_Early_add_phi_samples),ncol = 2)
sortSigmaTest_yesLate <- matrix(NaN,nrow = length(SigmaExp_Late_add_phi_samples),ncol = 2)
sortSigmaTest_yesEarly[,1] <- sort(SigmaTest_yesEarly[,1])
sortSigmaTest_yesEarly[,2] <- sort(SigmaTest_yesEarly[,2])
sortSigmaTest_yesLate[,1] <- sort(SigmaTest_yesLate[,1])
sortSigmaTest_yesLate[,2] <- sort(SigmaTest_yesLate[,2])
mean(SigmaTest_yesEarly[,1])
sortSigmaTest_yesEarly[ind975,1]
sortSigmaTest_yesEarly[ind075,1]
mean(SigmaTest_yesEarly[,2])
sortSigmaTest_yesEarly[ind975,2]
sortSigmaTest_yesEarly[ind075,2]
mean(SigmaTest_yesLate[,1])
sortSigmaTest_yesLate[ind975,1]
sortSigmaTest_yesLate[ind075,1]
mean(SigmaTest_yesLate[,2])
sortSigmaTest_yesLate[ind975,2]
sortSigmaTest_yesLate[ind075,2]
# Savage Dickey for sigma difference --------------------------------------
SigmaSimPulls1 <- rgamma(1000000, shape = 1.5, rate = 2)
SigmaSimPulls2 <- rgamma(1000000, shape = 1.5, rate = 2)
SigmaSimDiff <- SigmaSimPulls1-SigmaSimPulls2
hist(SigmaSimDiff)
SigmaDiffPrior_mean = mean(SigmaSimDiff)
SigmaDiffPrior_sd = sd(SigmaSimDiff)
prior_density_SigDiff = dnorm(0,0,.867)
posterior_density_sigDiff_yesEarly <- dlogspline(0,logspline(SigmaDiff_yesEarly))
posterior_density_sigDiff_yesLate <- dlogspline(0,logspline(SigmaDiff_yesLate))
SavDick_sig <- c(posterior_density_sigDiff_yesEarly/prior_density_SigDiff,
posterior_density_sigDiff_yesLate/prior_density_SigDiff)
# Plot beta inferences (add phi) -------------------------------------------
plotValues_early <- matrix(NaN, nrow = 7,ncol = 3)
plotValues_late <- matrix(NaN, nrow = 7,ncol = 3)
loconf = nrow(Beta_Early_add_phi_samples) * .025
hiconf = nrow(Beta_Early_add_phi_samples) * .975
tempsort <- sort(Beta_Early_add_phi_samples[,1])
plotValues_early[1,1] <- mean(tempsort[1500:1001])
plotValues_early[1,2] <- tempsort[loconf]
plotValues_early[1,3] <- tempsort[hiconf]
tempsort <- sort(Beta_Late_add_phi_samples[,1])
plotValues_late[1,1] <- mean(tempsort[1500:1001])
plotValues_late[1,2] <- tempsort[loconf]
plotValues_late[1,3] <- tempsort[hiconf]
for(i in 2:7){
tempsort <- sort(Beta_Early_add_phi_samples[,i])
plotValues_early[i,1] <- mean(tempsort[1500:1001])
plotValues_early[i,2] <- tempsort[loconf]
plotValues_early[i,3] <- tempsort[hiconf]
tempsort <- sort(Beta_Late_add_phi_samples[,i])
plotValues_late[i,1] <- mean(tempsort[1500:1001])
plotValues_late[i,2] <- tempsort[loconf]
plotValues_late[i,3] <- tempsort[hiconf]
}
nNovResponses = nNovices*nTrials
SONA_empirical_Early <- matrix(NaN,nrow = nNovResponses, ncol = 2)
SONA_empirical_Late <- matrix(NaN,nrow = nNovResponses, ncol = 2)
SONA_empirical_Early[,1] <- SONAData$EarlyResponse[which(SONAData$SpeakerEarly==1)]
SONA_empirical_Early[,2] <- SONAData$CompType[which(SONAData$SpeakerEarly==1)]
SONA_empirical_Late[,1] <- SONAData$LateResponse[which(SONAData$SpeakerLate==1)]
SONA_empirical_Late[,2] <- SONAData$CompType[which(SONAData$SpeakerLate==1)]
SONA_empirical_Early_mean <- mean(SONA_empirical_Early[,1])
SONA_empirical_Late_mean <- mean(SONA_empirical_Late[,1])
SONA_empirical_bycomp_Early <- rep(NaN,6)
SONA_empirical_bycomp_Late <- rep(NaN,6)
for(i in 1:max(SONAData$CompType)){
SONA_empirical_bycomp_Early[i] <- mean(SONA_empirical_Early[which(SONA_empirical_Early[,2]==i),1])
SONA_empirical_bycomp_Late[i] <- mean(SONA_empirical_Late[which(SONA_empirical_Late[,2]==i),1])
}
nExpResponses = nExperts*nTrials
Online_empirical_Early <- matrix(NaN,nrow = nExpResponses, ncol = 2)
Online_empirical_Late <- matrix(NaN,nrow = nExpResponses, ncol = 2)
Online_empirical_Early[,1] <- OnlineData$EarlyResponse[which(OnlineData$SpeakerEarly==1)]
Online_empirical_Early[,2] <- OnlineData$CompType[which(OnlineData$SpeakerEarly==1)]
Online_empirical_Late[,1] <- OnlineData$LateResponse[which(OnlineData$SpeakerLate==1)]
Online_empirical_Late[,2] <- OnlineData$CompType[which(OnlineData$SpeakerLate==1)]
Online_empirical_Early_mean <- mean(Online_empirical_Early[,1])
Online_empirical_Late_mean <- mean(Online_empirical_Late[,1])
Online_empirical_bycomp_Early <- rep(NaN,6)
Online_empirical_bycomp_Late <- rep(NaN,6)
for(i in 1:max(OnlineData$CompType)){
Online_empirical_bycomp_Early[i] <- mean(Online_empirical_Early[which(Online_empirical_Early[,2]==i),1])
Online_empirical_bycomp_Late[i] <- mean(Online_empirical_Late[which(Online_empirical_Late[,2]==i),1])
}
par(mfrow=c(1,1))
par(mar = c(3.5, 3, 1, 2))
plot1 = MainPlot(plotValues_early[1,1:3],SONA_empirical_Early_mean,SONA_empirical_bycomp_Early,
plotValues_early[2:7,1:3],Online_empirical_bycomp_Early,'',
if_legend = 0,leftmost = 1,bottommost = 0)
par(mar = c(3.5, 3, 1, 2))
plot2 = MainPlot(plotValues_late[1,1:3],SONA_empirical_Late_mean,SONA_empirical_bycomp_Late,
plotValues_late[2:7,1:3],Online_empirical_bycomp_Late,'',
if_legend = 1, leftmost = 1,bottommost = 1)
